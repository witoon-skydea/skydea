<section class="py-5">
  <div class="container">
    <!-- Welcome Banner -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="card border-0 bg-primary text-white shadow">
          <div class="card-body p-4">
            <div class="d-flex align-items-center">
              <div>
                <h2 class="mb-1">Welcome back, <%= user.username %>!</h2>
                <p class="mb-0 opacity-75">Here's what's happening with your account today.</p>
              </div>
              <div class="ms-auto d-none d-md-block">
                <i class="fas fa-user-circle fa-4x opacity-50"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Quick Actions Card -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="card border-0 shadow">
          <div class="card-header bg-white py-3">
            <div class="d-flex align-items-center">
              <i class="fas fa-bolt text-primary me-2"></i>
              <h5 class="mb-0">Quick Actions</h5>
            </div>
          </div>
          <div class="card-body">
            <div class="row g-4">
              <div class="col-md-3 col-sm-6">
                <a href="<%= basePath %>profile" class="text-decoration-none">
                  <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                      <div class="mb-3">
                        <i class="fas fa-cog fa-2x text-primary"></i>
                      </div>
                      <h6 class="mb-0">Profile Settings</h6>
                    </div>
                  </div>
                </a>
              </div>
              
              <div class="col-md-3 col-sm-6">
                <a href="#" class="text-decoration-none">
                  <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                      <div class="mb-3">
                        <i class="fas fa-bell fa-2x text-primary"></i>
                      </div>
                      <h6 class="mb-0">Notifications</h6>
                    </div>
                  </div>
                </a>
              </div>
              
              <div class="col-md-3 col-sm-6">
                <a href="#" class="text-decoration-none" id="new-trip-btn">
                  <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                      <div class="mb-3">
                        <i class="fas fa-plane-departure fa-2x text-primary"></i>
                      </div>
                      <h6 class="mb-0">New Trip</h6>
                    </div>
                  </div>
                </a>
              </div>
              
              <div class="col-md-3 col-sm-6">
                <a href="<%= basePath %>api-keys" class="text-decoration-none">
                  <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                      <div class="mb-3">
                        <i class="fas fa-key fa-2x text-primary"></i>
                      </div>
                      <h6 class="mb-0">API Keys</h6>
                    </div>
                  </div>
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Trips Section -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="card border-0 shadow">
          <div class="card-header bg-white py-3">
            <div class="d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center">
                <i class="fas fa-plane fa-lg text-primary me-2"></i>
                <h5 class="mb-0">My Trips</h5>
              </div>
              <button id="create-trip-btn" class="btn btn-sm btn-primary">
                <i class="fas fa-plus me-1"></i> Create Trip
              </button>
            </div>
          </div>
          <div class="card-body">
            <div id="trips-loading" class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2 text-muted">Loading your trips...</p>
            </div>
            
            <div id="trips-empty" class="text-center py-4 d-none">
              <div class="mb-3">
                <i class="fas fa-suitcase fa-4x text-muted opacity-50"></i>
              </div>
              <h5>No Trips Yet</h5>
              <p class="text-muted">Start planning your adventure by creating a new trip.</p>
              <button id="empty-create-trip-btn" class="btn btn-primary mt-2">
                <i class="fas fa-plus me-2"></i> Create Your First Trip
              </button>
            </div>
            
            <div id="trips-container" class="d-none">
              <div class="row" id="trips-grid">
                <!-- Trips will be loaded here dynamically -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Stats Row -->
    <div class="row mb-4">
      <div class="col-md-4 mb-4 mb-md-0">
        <div class="stat-card">
          <div class="stat-value">1</div>
          <div class="stat-label">Active Sessions</div>
        </div>
      </div>
      
      <div class="col-md-4 mb-4 mb-md-0">
        <div class="stat-card">
          <div class="stat-value"><%= new Date(user.created_at).toLocaleDateString() %></div>
          <div class="stat-label">Member Since</div>
        </div>
      </div>
      
      <div class="col-md-4">
        <div class="stat-card">
          <div class="stat-value">
            <span id="trip-count">0</span>
          </div>
          <div class="stat-label">Trips</div>
        </div>
      </div>
    </div>
    
    <!-- API Keys Card -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="card border-0 shadow">
          <div class="card-header bg-white py-3">
            <div class="d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center">
                <i class="fas fa-key fa-lg text-primary me-2"></i>
                <h5 class="mb-0">API Access</h5>
              </div>
              <a href="<%= basePath %>api-keys" class="btn btn-sm btn-primary">
                <i class="fas fa-cog me-1"></i> Manage API Keys
              </a>
            </div>
          </div>
          <div class="card-body">
            <div class="d-flex align-items-center">
              <div class="flex-shrink-0 me-3">
                <div class="rounded-circle bg-light p-3">
                  <i class="fas fa-code fa-2x text-primary"></i>
                </div>
              </div>
              <div>
                <h5 class="mb-1">Developer API Access</h5>
                <p class="mb-0">Use API keys to connect your Skydea trips to external applications and services. Create, update, and manage your trips programmatically.</p>
                <a href="<%= basePath %>api-keys" class="btn btn-link px-0">Create your first API key <i class="fas fa-arrow-right ms-1"></i></a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Main Content -->
    <div class="row">
      <!-- Profile Card -->
      <div class="col-lg-4 mb-4">
        <div class="card border-0 shadow h-100">
          <div class="card-header bg-white py-3">
            <div class="d-flex align-items-center">
              <i class="fas fa-user-circle text-primary me-2"></i>
              <h5 class="mb-0">Profile Information</h5>
            </div>
          </div>
          <div class="card-body">
            <div class="text-center mb-4">
              <div class="avatar-placeholder mb-3">
                <i class="fas fa-user-circle fa-5x text-secondary"></i>
              </div>
              <h5 class="mb-1"><%= user.username %></h5>
              <p class="text-muted mb-0"><%= user.email %></p>
            </div>
            
            <hr>
            
            <ul class="list-group list-group-flush">
              <li class="list-group-item px-0 d-flex justify-content-between">
                <span class="text-muted">Username</span>
                <span class="fw-medium"><%= user.username %></span>
              </li>
              <li class="list-group-item px-0 d-flex justify-content-between">
                <span class="text-muted">Email</span>
                <span class="fw-medium"><%= user.email %></span>
              </li>
              <li class="list-group-item px-0 d-flex justify-content-between">
                <span class="text-muted">Account Created</span>
                <span class="fw-medium"><%= new Date(user.created_at).toLocaleDateString() %></span>
              </li>
              <li class="list-group-item px-0 d-flex justify-content-between">
                <span class="text-muted">Last Updated</span>
                <span class="fw-medium"><%= new Date(user.updated_at).toLocaleDateString() %></span>
              </li>
            </ul>
          </div>
          <div class="card-footer bg-white py-3">
            <a href="<%= basePath %>profile" class="btn btn-sm btn-outline-primary w-100">
              <i class="fas fa-edit me-2"></i> Edit Profile
            </a>
          </div>
        </div>
      </div>
      
      <!-- Activity Card -->
      <div class="col-lg-8 mb-4">
        <div class="card border-0 shadow h-100">
          <div class="card-header bg-white py-3">
            <div class="d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center">
                <i class="fas fa-chart-line text-primary me-2"></i>
                <h5 class="mb-0">Recent Activity</h5>
              </div>
              <a href="#" class="btn btn-sm btn-outline-primary">View All</a>
            </div>
          </div>
          <div class="card-body">
            <div class="timeline">
              <div class="timeline-item">
                <div class="timeline-item-marker">
                  <div class="timeline-item-marker-indicator bg-primary">
                    <i class="fas fa-sign-in-alt text-white"></i>
                  </div>
                </div>
                <div class="timeline-item-content">
                  <p class="mb-0 fw-bold">Login Successful</p>
                  <p class="text-muted small mb-2"><%= new Date().toLocaleString() %></p>
                  <p class="mb-0">You logged in from your current device</p>
                </div>
              </div>
              
              <div class="timeline-item">
                <div class="timeline-item-marker">
                  <div class="timeline-item-marker-indicator bg-success">
                    <i class="fas fa-user-check text-white"></i>
                  </div>
                </div>
                <div class="timeline-item-content">
                  <p class="mb-0 fw-bold">Account Created</p>
                  <p class="text-muted small mb-2"><%= new Date(user.created_at).toLocaleString() %></p>
                  <p class="mb-0">Your account was successfully created</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
    </div>
  </div>
</section>

<!-- New Trip Modal -->
<div class="modal fade" id="new-trip-modal" tabindex="-1" aria-labelledby="new-trip-modal-label" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="new-trip-modal-label">Create New Trip</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="new-trip-form">
          <div class="mb-3">
            <label for="trip-title" class="form-label">Trip Title</label>
            <input type="text" class="form-control" id="trip-title" placeholder="e.g., Summer Vacation 2025" required>
          </div>
          <div class="mb-3">
            <label for="trip-description" class="form-label">Description (Optional)</label>
            <textarea class="form-control" id="trip-description" rows="3" placeholder="Brief description of your trip"></textarea>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="trip-start-date" class="form-label">Start Date</label>
              <input type="date" class="form-control" id="trip-start-date" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="trip-end-date" class="form-label">End Date</label>
              <input type="date" class="form-control" id="trip-end-date" required>
            </div>
          </div>
          <div id="trip-form-error" class="alert alert-danger d-none" role="alert"></div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="save-trip-btn">Create Trip</button>
      </div>
    </div>
  </div>
</div>

<!-- Trip JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const tripsContainer = document.getElementById('trips-container');
    const tripsLoading = document.getElementById('trips-loading');
    const tripsEmpty = document.getElementById('trips-empty');
    const tripsList = document.getElementById('trips-list');
    const tripCount = document.getElementById('trip-count');
    const newTripModal = new bootstrap.Modal(document.getElementById('new-trip-modal'));
    const newTripForm = document.getElementById('new-trip-form');
    const tripFormError = document.getElementById('trip-form-error');
    
    // Buttons to open the modal
    document.getElementById('create-trip-btn').addEventListener('click', () => newTripModal.show());
    document.getElementById('new-trip-btn').addEventListener('click', () => newTripModal.show());
    document.getElementById('empty-create-trip-btn').addEventListener('click', () => newTripModal.show());
    
    // Form handling
    document.getElementById('save-trip-btn').addEventListener('click', createTrip);
    
    // Load trips on page load
    loadTrips();
    
    // Function to load trips
    async function loadTrips() {
      try {
        const response = await fetch('<%= basePath %>trips', {
          method: 'GET',
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch trips');
        }
        
        const trips = await response.json();
        
        // Update trip count
        tripCount.textContent = trips.length;
        
        // Display trips or empty state
        if (trips.length === 0) {
          tripsLoading.classList.add('d-none');
          tripsEmpty.classList.remove('d-none');
        } else {
          tripsLoading.classList.add('d-none');
          tripsContainer.classList.remove('d-none');
          
          // Clear existing trips
          const tripsGrid = document.getElementById('trips-grid');
          tripsGrid.innerHTML = '';
          
          // Add each trip to the grid
          trips.forEach(trip => {
            const startDate = new Date(trip.start_date).toLocaleDateString();
            const endDate = new Date(trip.end_date).toLocaleDateString();
            const createdDate = new Date(trip.created_at).toLocaleDateString();
            
            // Calculate duration
            const start = new Date(trip.start_date);
            const end = new Date(trip.end_date);
            const diffTime = Math.abs(end - start);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
            
            // Create trip card
            const tripCol = document.createElement('div');
            tripCol.className = 'col-md-6 col-lg-4 mb-4';
            
            // Default image
            const defaultImage = `<%= basePath %>images/main_photo.png`;
            
            tripCol.innerHTML = `
              <div class="card h-100 shadow trip-card" data-trip-id="${trip.id}">
                <div class="card-img-overlay-wrapper">
                  <div class="trip-card-img-container" data-trip-id="${trip.id}">
                    <img src="${defaultImage}" class="card-img-top trip-card-img" 
                      alt="${trip.title}" style="height: 140px; object-fit: cover; width: 100%;">
                  </div>
                  <div class="card-img-overlay text-white d-flex flex-column justify-content-end" 
                      style="background: linear-gradient(to top, rgba(0,0,0,0.7), rgba(0,0,0,0.2), rgba(0,0,0,0));">
                    <h5 class="card-title mb-0">${trip.title}</h5>
                    <p class="card-text mb-0"><small>${startDate} - ${endDate}</small></p>
                    ${trip.is_public ? '<span class="badge bg-success position-absolute top-0 end-0 mt-2 me-2"><i class="fas fa-lock-open"></i> Public</span>' : ''}
                  </div>
                </div>
                <div class="card-body">
                  <div class="d-flex justify-content-between align-items-center mb-2">
                    <span class="badge bg-primary rounded-pill">${diffDays} day${diffDays !== 1 ? 's' : ''}</span>
                    <span class="badge bg-secondary places-count" data-trip-id="${trip.id}">Loading...</span>
                  </div>
                  <p class="card-text small text-muted mb-0">${trip.description || 'No description'}</p>
                </div>
                <div class="card-footer bg-white border-0 d-flex justify-content-between">
                  <small class="text-muted">Created: ${createdDate}</small>
                  <div class="btn-group">
                    <a href="<%= basePath %>trips/${trip.id}/planner" class="btn btn-sm btn-primary">
                      <i class="fas fa-edit me-1"></i> Plan
                    </a>
                    <button type="button" class="btn btn-sm btn-outline-danger delete-trip" data-trip-id="${trip.id}">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                </div>
              </div>
            `;
            
            tripsGrid.appendChild(tripCol);
            // Load place count and cover image for this trip
            loadPlaceCount(trip.id);
            loadTripCoverImage(trip.id);
          });
          
          // Add event listeners for delete buttons
          document.querySelectorAll('.delete-trip').forEach(button => {
            button.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();
              const tripId = this.getAttribute('data-trip-id');
              if (confirm('Are you sure you want to delete this trip? This action cannot be undone.')) {
                deleteTrip(tripId);
              }
            });
          });
          
          // Add click event to the whole card
          document.querySelectorAll('.trip-card').forEach(card => {
            card.addEventListener('click', function(e) {
              // Only trigger if the click wasn't on a button
              if (!e.target.closest('button')) {
                const tripId = this.getAttribute('data-trip-id');
                window.location.href = `<%= basePath %>trips/${tripId}/planner`;
              }
            });
            card.style.cursor = 'pointer';
          });
          
          // Add event listeners to delete buttons
          document.querySelectorAll('.delete-trip').forEach(button => {
            button.addEventListener('click', function() {
              const tripId = this.getAttribute('data-trip-id');
              if (confirm('Are you sure you want to delete this trip? This action cannot be undone.')) {
                deleteTrip(tripId);
              }
            });
          });
        }
      } catch (error) {
        console.error('Error loading trips:', error);
        tripsLoading.innerHTML = `
          <div class="alert alert-danger" role="alert">
            Failed to load trips. Please try again later.
          </div>
        `;
      }
    }
    
    // Function to load place count for a trip
    async function loadPlaceCount(tripId) {
      try {
        const response = await fetch(`<%= basePath %>places/trip/${tripId}`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch places');
        }
        
        const places = await response.json();
        
        // Store places data for later use in loadTripCoverImage
        window.tripPlaces = window.tripPlaces || {};
        window.tripPlaces[tripId] = places;
        
        // Find all elements with data-trip-id attribute matching this trip
        const tripElements = document.querySelectorAll(`[data-trip-id="${tripId}"]`);
        
        tripElements.forEach(element => {
          // Update place count badges
          if (element.classList.contains('places-count')) {
            element.textContent = places.length;
            element.className = places.length > 0 ? 'badge bg-primary places-count' : 'badge bg-secondary places-count';
            element.setAttribute('data-trip-id', tripId);
          }
        });
      } catch (error) {
        console.error(`Error loading places for trip ${tripId}:`, error);
      }
    }
    
    // Function to load and set the cover image for a trip
    async function loadTripCoverImage(tripId) {
      try {
        // Wait for places data to be available (should have been fetched by loadPlaceCount)
        if (!window.tripPlaces || !window.tripPlaces[tripId]) {
          // If places aren't available yet, try again in a moment
          setTimeout(() => loadTripCoverImage(tripId), 100);
          return;
        }
        
        const places = window.tripPlaces[tripId];
        const defaultImage = `<%= basePath %>images/main_photo.png`;
        let imageUrl = defaultImage;
        
        // Find the image container for this trip
        const imgContainer = document.querySelector(`.trip-card-img-container[data-trip-id="${tripId}"]`);
        if (!imgContainer) return;
        
        // Find a place with an image
        if (places.length > 0) {
          // Filter places that have an image_url
          const placesWithImages = places.filter(place => place.image_url);
          
          if (placesWithImages.length > 0) {
            // Get the first place with an image
            const place = placesWithImages[0];
            
            // Handle potential CORS issues with Google Place images
            if (place.image_url.includes('maps.googleapis.com')) {
              // Use our backend proxy for Google images
              const googlePhotoRef = new URL(place.image_url).searchParams.get('photoreference');
              if (googlePhotoRef) {
                imageUrl = `<%= basePath %>api/places/photo?photoreference=${googlePhotoRef}&maxwidth=800`;
              } else {
                imageUrl = place.image_url;
              }
            } else {
              imageUrl = place.image_url;
            }
          } else {
            // Use a random background image if no places have images but trip has places
            const backgroundImages = [
              `<%= basePath %>images/backgrounds/bg1.png`,
              `<%= basePath %>images/backgrounds/bg2.png`,
              `<%= basePath %>images/backgrounds/bg3.png`
            ];
            
            const randomIndex = Math.floor(Math.random() * backgroundImages.length);
            imageUrl = backgroundImages[randomIndex];
          }
        }
        
        // Update the image source
        const imgElement = imgContainer.querySelector('img');
        if (imgElement) {
          imgElement.src = imageUrl;
          imgElement.setAttribute('onerror', `this.src='${defaultImage}'; this.onerror=null;`);
        }
      } catch (error) {
        console.error(`Error loading cover image for trip ${tripId}:`, error);
      }
    }
    
    // Function to create a new trip
    async function createTrip() {
      // Reset error message
      tripFormError.classList.add('d-none');
      
      // Get form values
      const title = document.getElementById('trip-title').value.trim();
      const description = document.getElementById('trip-description').value.trim();
      const startDate = document.getElementById('trip-start-date').value;
      const endDate = document.getElementById('trip-end-date').value;
      
      // Validate form
      if (!title || !startDate || !endDate) {
        tripFormError.textContent = 'Please fill in all required fields';
        tripFormError.classList.remove('d-none');
        return;
      }
      
      // Validate dates
      if (new Date(endDate) < new Date(startDate)) {
        tripFormError.textContent = 'End date must be after start date';
        tripFormError.classList.remove('d-none');
        return;
      }
      
      try {
        const response = await fetch('<%= basePath %>trips', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            title,
            description: description || null,
            start_date: startDate,
            end_date: endDate
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to create trip');
        }
        
        // Clear form
        newTripForm.reset();
        
        // Hide modal
        newTripModal.hide();
        
        // Reload trips
        loadTrips();
      } catch (error) {
        console.error('Error creating trip:', error);
        tripFormError.textContent = error.message || 'Failed to create trip. Please try again.';
        tripFormError.classList.remove('d-none');
      }
    }
    
    // Function to delete a trip
    async function deleteTrip(tripId) {
      try {
        const response = await fetch(`<%= basePath %>trips/${tripId}`, {
          method: 'DELETE',
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to delete trip');
        }
        
        // Reload trips
        loadTrips();
      } catch (error) {
        console.error('Error deleting trip:', error);
        alert('Failed to delete trip. Please try again.');
      }
    }
  });
</script>

<style>
/* Trip card styling */
.trip-card {
  transition: all 0.3s ease;
  overflow: hidden;
  border-radius: 8px;
}

.trip-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0,0,0,0.15) !important;
}

.trip-card .card-img-overlay-wrapper {
  position: relative;
}

.trip-card-img-container {
  overflow: hidden;
  height: 140px;
}

.trip-card-img {
  transition: transform 0.3s ease;
  height: 100%;
  width: 100%;
  object-fit: cover;
}

.trip-card:hover .trip-card-img {
  transform: scale(1.05);
}

.timeline {
  position: relative;
  padding-left: 1.75rem;
}

.timeline-item {
  position: relative;
  padding-bottom: 2rem;
}

.timeline-item:last-child {
  padding-bottom: 0;
}

.timeline-item:before {
  content: '';
  position: absolute;
  left: -0.86rem;
  top: 0;
  height: 100%;
  border-left: 1px dashed #e0e0e0;
}

.timeline-item-marker {
  position: absolute;
  left: -1.75rem;
  top: 0;
}

.timeline-item-marker-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 2rem;
  width: 2rem;
  border-radius: 100%;
  box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
}

.timeline-item-marker-indicator i {
  font-size: 0.875rem;
}
</style>